{"ast":null,"code":"var index = typeof fetch == 'function' ? fetch.bind() : function (url, options) {\n  options = options || {};\n  return new Promise(function (resolve, reject) {\n    var request = new XMLHttpRequest();\n    request.open(options.method || 'get', url, true);\n\n    for (var i in options.headers) {\n      request.setRequestHeader(i, options.headers[i]);\n    }\n\n    request.withCredentials = options.credentials == 'include';\n\n    request.onload = function () {\n      resolve(response());\n    };\n\n    request.onerror = reject;\n    request.send(options.body || null);\n\n    function response() {\n      var _keys = [],\n          all = [],\n          headers = {},\n          header;\n      request.getAllResponseHeaders().replace(/^(.*?):[^\\S\\n]*([\\s\\S]*?)$/gm, function (m, key, value) {\n        _keys.push(key = key.toLowerCase());\n\n        all.push([key, value]);\n        header = headers[key];\n        headers[key] = header ? header + \",\" + value : value;\n      });\n      return {\n        ok: (request.status / 100 | 0) == 2,\n        // 200-299\n        status: request.status,\n        statusText: request.statusText,\n        url: request.responseURL,\n        clone: response,\n        text: function text() {\n          return Promise.resolve(request.responseText);\n        },\n        json: function json() {\n          return Promise.resolve(request.responseText).then(JSON.parse);\n        },\n        blob: function blob() {\n          return Promise.resolve(new Blob([request.response]));\n        },\n        headers: {\n          keys: function keys() {\n            return _keys;\n          },\n          entries: function entries() {\n            return all;\n          },\n          get: function get(n) {\n            return headers[n.toLowerCase()];\n          },\n          has: function has(n) {\n            return n.toLowerCase() in headers;\n          }\n        }\n      };\n    }\n  });\n};\nexport default index;","map":null,"metadata":{},"sourceType":"module"}