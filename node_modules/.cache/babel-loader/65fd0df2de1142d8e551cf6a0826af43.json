{"ast":null,"code":"\"use strict\";\n\nfunction _interopRequireDefault(e) {\n  return e && e.__esModule ? e : {\n    default: e\n  };\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: !0\n});\n\nvar _type = require(\"ramda/src/type\"),\n    _type2 = _interopRequireDefault(_type),\n    _identity = require(\"ramda/src/identity\"),\n    _identity2 = _interopRequireDefault(_identity),\n    _replace = require(\"ramda/src/replace\"),\n    _replace2 = _interopRequireDefault(_replace),\n    _always = require(\"ramda/src/always\"),\n    _always2 = _interopRequireDefault(_always),\n    _props = require(\"ramda/src/props\"),\n    _props2 = _interopRequireDefault(_props),\n    _equals = require(\"ramda/src/equals\"),\n    _equals2 = _interopRequireDefault(_equals),\n    _head = require(\"ramda/src/head\"),\n    _head2 = _interopRequireDefault(_head),\n    _ifElse = require(\"ramda/src/ifElse\"),\n    _ifElse2 = _interopRequireDefault(_ifElse),\n    _ = require(\"ramda/src/__\"),\n    _2 = _interopRequireDefault(_),\n    _merge = require(\"ramda/src/merge\"),\n    _merge2 = _interopRequireDefault(_merge),\n    _clone = require(\"ramda/src/clone\"),\n    _clone2 = _interopRequireDefault(_clone),\n    _compose = require(\"ramda/src/compose\"),\n    _compose2 = _interopRequireDefault(_compose),\n    _stringifyQuery = require(\"./stringify-query\"),\n    _stringifyQuery2 = _interopRequireDefault(_stringifyQuery),\n    _stringifyJSON = require(\"./stringify-j-s-o-n\"),\n    _stringifyJSON2 = _interopRequireDefault(_stringifyJSON),\n    _responseType = require(\"./_/response-type\"),\n    _responseType2 = _interopRequireDefault(_responseType),\n    _api = require(\"./api\"),\n    _api2 = _interopRequireDefault(_api),\n    _mockFetch = require(\"./_/mock-fetch\"),\n    _mockFetch2 = _interopRequireDefault(_mockFetch),\n    CONTENT_TYPE = {\n  JSON: \"application/json\",\n  FORM: \"application/x-www-form-urlencoded\"\n};\n\nexports.default = function (e, r) {\n  var t = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {},\n      a = t.method,\n      i = void 0 === a ? \"post\" : a,\n      _ = t.headers,\n      u = void 0 === _ ? {} : _,\n      l = t.dataType,\n      o = void 0 === l ? \"json\" : l;\n  u = (0, _compose2.default)((0, _merge2.default)({\n    \"Content-Type\": CONTENT_TYPE.JSON\n  }, _2.default), _clone2.default)(u);\n  var s = (0, _ifElse2.default)((0, _compose2.default)((0, _equals2.default)(CONTENT_TYPE.FORM), _head2.default, (0, _props2.default)([\"Content-Type\"])), (0, _compose2.default)(_always2.default, (0, _replace2.default)(\"?\", \"\"), _stringifyQuery2.default)(r), (0, _always2.default)((0, _ifElse2.default)((0, _compose2.default)((0, _equals2.default)(\"String\"), _type2.default), _identity2.default, (0, _compose2.default)(_always2.default, _stringifyJSON2.default)(r))(r)))(u);\n  return (0, _mockFetch2.default)()((0, _api2.default)(e), {\n    method: i,\n    headers: u,\n    body: s\n  }).then(function (e) {\n    return e[(0, _responseType2.default)(o)]();\n  });\n};","map":null,"metadata":{},"sourceType":"script"}